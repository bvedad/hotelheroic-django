# Generated by Django 3.2.6 on 2023-06-10 20:35

import apps.reservation.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('app', '0002_initial'),
        ('room', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_id', models.IntegerField(blank=True, help_text='The third-party source ID for this reservation.', null=True)),
                ('third_party_identifier', models.CharField(blank=True, help_text='If it was received from a booking channel, this can be an identifier from that channel.', max_length=255, null=True)),
                ('start_date', models.DateField(help_text='Check-In date.')),
                ('end_date', models.DateField(help_text='Check-Out date.')),
                ('guest_first_name', models.CharField(help_text='First name of the guest', max_length=255)),
                ('guest_last_name', models.CharField(help_text='Last name of the guest', max_length=255)),
                ('guest_gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('N/A', 'Not Applicable')], help_text="Allowed values: 'M' (Male), 'F' (Female), 'N/A' (Not Applicable)", max_length=50, null=True)),
                ('guest_country', models.CharField(help_text='Valid ISO-Code for Country (2 characters)', max_length=2)),
                ('guest_zip', models.CharField(help_text='ZIP Code', max_length=255)),
                ('guest_email', models.CharField(help_text='Guest email', max_length=255)),
                ('guest_phone', models.CharField(blank=True, help_text='Guest main phone number', max_length=255, null=True)),
                ('estimated_arrival_time', models.TimeField(blank=True, help_text='Estimated Arrival Time, 24-hour format.', null=True)),
                ('adults', models.IntegerField()),
                ('children', models.IntegerField()),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('credit', 'Credit'), ('ebanking', 'EBanking'), ('pay_pal', 'PayPal')], help_text='Payment Method of choice. Allowed values: "cash", "credit", "ebanking", "pay_pal"', max_length=50)),
                ('card_token', models.CharField(blank=True, help_text='Credit Card identifier. Payment Method must be credit. This field should be filled with credit card identifier according to gateway. Only available for Stripe and should send the Customer ID.', max_length=255, null=True)),
                ('payment_authorization_code', models.CharField(blank=True, help_text='Transaction identifier. Payment Method must be credit. This field should be filled with transaction identifier according to gateway. Only available for Stripe and it should be filled with Charge ID associated with the Payment Intent.', max_length=255, null=True)),
                ('promo_code', models.CharField(blank=True, help_text='Promotional code. Required for specials and packages that use it. "rateID" parameter required for using "promoCode".', max_length=255, null=True)),
                ('allotment_block_code', models.CharField(blank=True, help_text='Allotment block code to add the reservation to the allotment block.', max_length=255, null=True)),
                ('custom_fields', models.ManyToManyField(help_text='Array with custom fields information', to='app.CustomField')),
                ('rooms', models.ManyToManyField(help_text='Array with quantity of rooms', to='room.Room')),
            ],
            options={
                'db_table': 'reservation',
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_name', models.CharField(help_text='Source Name', max_length=255)),
                ('is_third_party', models.BooleanField(help_text='True if the source is from a third party')),
                ('status', models.BooleanField(help_text='True if the source is active')),
                ('commission', models.FloatField(help_text='How much commission is charged by the source (in %)')),
                ('payment_collect', models.CharField(choices=[('hotel', 'Hotel'), ('channel', 'Channel')], help_text='Type of payment collect practiced by the source. Allowed values: "hotel", "channel"', max_length=50)),
            ],
            options={
                'db_table': 'source_data',
            },
        ),
        migrations.CreateModel(
            name='ReservationNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reservation_note', models.TextField(help_text='Note to be added to reservation')),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservation.reservation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ReservationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Form-based File Upload', upload_to='reservation_documents/', validators=[apps.reservation.models.validate_file_size, django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'rtf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png', 'gif', 'csv', 'txt', 'xls', 'xlsx'])])),
                ('reservation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reservation.reservation')),
            ],
        ),
    ]
