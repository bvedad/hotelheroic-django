# Generated by Django 3.2.6 on 2023-06-10 20:35

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('settings', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Adjustment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adjustment_type', models.CharField(choices=[('rate', 'Rate'), ('product', 'Product'), ('fee', 'Fee'), ('tax', 'Tax')], max_length=50)),
                ('amount', models.FloatField()),
                ('notes', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency_code', models.CharField(help_text='Currency code', max_length=3)),
                ('currency_name', models.CharField(help_text='Currency name', max_length=255)),
                ('currency_symbol', models.CharField(help_text='Currency symbol', max_length=255)),
                ('currency_position', models.CharField(choices=[('BEFORE', 'Before'), ('AFTER', 'After')], max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='CurrencySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_currency', models.CharField(help_text='Default Currency ISO CODE', max_length=3)),
                ('acceptable_currencies', models.JSONField(help_text='Acceptable Currency ISO CODEs')),
                ('decimal_separator', models.CharField(max_length=1)),
                ('thousand_separator', models.CharField(max_length=1)),
            ],
        ),
        migrations.CreateModel(
            name='CurrencySettingsRate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('currency', models.CharField(help_text='Currency ISO CODE', max_length=3)),
                ('rate', models.FloatField()),
            ],
        ),
        migrations.CreateModel(
            name='CustomField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('shortcode', models.CharField(help_text='Internal reference and is used for integration purposes such as custom links and the API', max_length=255)),
                ('apply_to', models.CharField(choices=[('reservation', 'Reservation'), ('guest', 'Guest')], default='reservation', help_text='Where put this field in reservation or guest section of the booking.', max_length=50)),
                ('required', models.BooleanField(default=False, help_text='Specify whether this field is required to be filled out.')),
                ('max_characters', models.IntegerField(default=40, help_text='Maximum number of characters allowed to be entered in this field.')),
                ('type', models.CharField(choices=[('input', 'Input'), ('text', 'Text')], default='input', max_length=50)),
                ('displayed_in_reservation', models.BooleanField(default=True)),
                ('displayed_in_booking', models.BooleanField(default=True)),
                ('displayed_in_card', models.BooleanField(default=True)),
                ('is_personal', models.BooleanField(help_text="Specifies if the contents of this field may contain personal information. User's personal information may be removed upon request according to GDPR rules.")),
            ],
        ),
        migrations.CreateModel(
            name='EmailSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_name', models.CharField(max_length=255)),
                ('reservation_status_change', models.CharField(blank=True, choices=[('confirmed', 'Confirmed'), ('not_confirmed', 'Not confirmed'), ('canceled', 'Canceled'), ('checked_in', 'Checked in'), ('checked_out', 'Checked out'), ('no_show', 'No show')], help_text='Specify which reservation status change triggers sending the email', max_length=50, null=True)),
                ('reservation_event', models.CharField(blank=True, choices=[('after_booking', 'After booking'), ('after_check_out', 'After check out'), ('after_check_in', 'After check in'), ('before_check_out', 'Before check out'), ('before_check_in', 'Before check in')], help_text='Specify event that triggers email sending', max_length=50, null=True)),
                ('days', models.IntegerField()),
                ('time', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='EmailTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_type', models.CharField(choices=[('nonMarketing', 'Non-Marketing'), ('marketing', 'Marketing')], default='nonMarketing', help_text='Type of the email template: Marketing or Non-Marketing. Only applicable to GDPR compliant properties.', max_length=50)),
                ('name', models.CharField(help_text='Template name', max_length=255)),
                ('from_email', models.EmailField(help_text='Email address from which the email message may be sent', max_length=254)),
                ('from_name', models.CharField(help_text='Name from which the email message may be sent. If empty email will be used', max_length=255)),
                ('subject', models.TextField()),
                ('body', models.TextField()),
                ('reply_to', models.EmailField(blank=True, help_text='Email address to which the email message may be replied. If empty, the value on from parameter will be used.', max_length=254, null=True)),
                ('reply_to_name', models.CharField(blank=True, help_text='Name to which the email message may be replied. If empty, email will be used.', max_length=255, null=True)),
                ('autofill_all_languages', models.BooleanField(default=False, help_text="If set, all languages will be set with the value for the property language. If not informed and only one language is sent, it's considered true, if more than one language is sent, it'll be considered false.")),
                ('cc', models.EmailField(blank=True, help_text='Email address to which the email message may be sent as a Carbon Copy', max_length=254, null=True)),
                ('bcc', models.EmailField(blank=True, help_text='Email address to which the email message may be sent as a Blind Carbon Copy', max_length=254, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Guest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guest_first_name', models.CharField(max_length=255)),
                ('guest_last_name', models.CharField(max_length=255)),
                ('guest_email', models.EmailField(max_length=255)),
                ('is_main_guest', models.BooleanField(default=False, help_text='If the guest is the main guest of its reservation')),
                ('is_anonymized', models.BooleanField(default=False, help_text='Flag indicating the guest data was removed upon request')),
                ('guest_gender', models.CharField(blank=True, choices=[('MALE', 'Male'), ('FEMALE', 'Female'), ('NOT_AVAILABLE', 'Not Available')], max_length=50, null=True)),
                ('guest_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_cell_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_address1', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_address2', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_city', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_state', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_country', models.CharField(blank=True, help_text='ISO-Code for Country (2 characters)', max_length=2, null=True)),
                ('guest_zip', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_birth_date', models.DateField(blank=True, null=True)),
                ('guest_document_type', models.CharField(blank=True, choices=[('IDENTITY_CARD', 'Identity Card'), ('DRIVER_LICENSE', 'Driver License'), ('NON_SELECTION', 'Non Selection'), ('RESIDENCE_PERMIT', 'Residence Permit'), ('PASSPORT', 'Passport'), ('SOCIAL_SECURITY_CARD', 'Social Security Card'), ('STUDENT_ID', 'Student ID')], max_length=50, null=True)),
                ('guest_document_number', models.CharField(blank=True, max_length=255, null=True)),
                ('guest_document_issue_date', models.DateField(blank=True, null=True)),
                ('guest_document_issuing_country', models.CharField(blank=True, help_text='Valid ISO-Code for Country (2 characters)', max_length=2, null=True)),
                ('guest_document_expiration_date', models.DateField(blank=True, null=True)),
                ('guest_company_tax_id', models.CharField(blank=True, help_text='Guest company tax ID', max_length=255, null=True)),
                ('guest_company_name', models.CharField(blank=True, help_text='Guest company name', max_length=255, null=True)),
                ('guest_opt_in', models.BooleanField(default=False, help_text='If guest has opted-in to marketing communication or not')),
                ('guest_photo', models.ImageField(blank=True, null=True, upload_to='guest_photos')),
                ('guest_document', models.FileField(blank=True, null=True, upload_to='documents/', validators=[django.core.validators.FileExtensionValidator(['pdf', 'rtf', 'doc', 'docx', 'txt', 'jpg', 'jpeg', 'png', 'gif', 'csv', 'xls', 'xlsx'])])),
            ],
        ),
        migrations.CreateModel(
            name='GuestNote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='HotelAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Amenity name', max_length=255)),
                ('category', models.CharField(choices=[('CHECK_IN_FRONT_DESK_SERVICES', 'Check-in & Front-Desk Services'), ('GENERAL_GUEST_SERVICES', 'General Guest Services'), ('POOL_SPA_WELLNESS', 'Pool, Spa, & Wellness'), ('ENTERTAINMENT_RECREATION', 'Entertainment & Recreation'), ('FOOD_BEVERAGE', 'Food & Beverage'), ('PARKING_TRANSPORTATION', 'Parking & Transportation'), ('FAMILY_SERVICES_ACTIVITIES', 'Family Services & Activities'), ('COMMON_AREAS', 'Common Areas'), ('CLEANING_SERVICES', 'Cleaning Services'), ('BUSINESS_SERVICES', 'Business Services'), ('SHOPPING', 'Shopping'), ('ACCESSIBILITY', 'Accessibility'), ('SAFETY_SECURITY', 'Safety & Security'), ('ENVIRONMENT_SUSTAINABILITY', 'Environment & Sustainability'), ('SANITATION_HYGIENE_GUEST_HEALTH', 'Sanitation, Hygiene, & Guest Health'), ('CUSTOM_AMENITY', 'Custom Amenity')], help_text='Amenity category', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='HouseAccount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_name', models.CharField(help_text='House Account name', max_length=255)),
                ('is_private', models.BooleanField(default=False, help_text='Whether House Account is available only to the user (optional)')),
            ],
            options={
                'verbose_name_plural': 'House Accounts',
            },
        ),
        migrations.CreateModel(
            name='Housekeeper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Housekeeper name', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='HousekeepingAssignment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='HousekeepingStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('room_condition', models.CharField(blank=True, choices=[('CLEAN', 'Clean'), ('DIRTY', 'Dirty')], max_length=50, null=True)),
                ('do_not_disturb', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('thumb', models.ImageField(help_text='Thumbnail Image', upload_to='property_images')),
                ('image', models.ImageField(help_text='Full Image', upload_to='property_images')),
                ('hotel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='settings.hotel')),
            ],
        ),
    ]
