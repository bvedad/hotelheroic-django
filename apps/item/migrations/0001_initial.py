# Generated by Django 3.2.6 on 2023-06-10 20:35

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('app', '0003_initial'),
        ('taxesandfees', '0001_initial'),
        ('reservation', '0001_initial'),
        ('payment', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemCategories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(help_text='Category name', max_length=255)),
                ('category_code', models.CharField(help_text='Category code', max_length=255)),
                ('category_color', models.CharField(help_text='Category color (like #3b7be7)', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_type', models.CharField(choices=[('product', 'Product'), ('service', 'Service')], help_text='Item type', max_length=50)),
                ('sku', models.CharField(help_text='Item SKU', max_length=255)),
                ('item_code', models.CharField(help_text='Item code', max_length=255)),
                ('name', models.CharField(help_text='Item name', max_length=255)),
                ('description', models.TextField(help_text='Item description')),
                ('price', models.FloatField(help_text='Item price')),
                ('stock_inventory', models.BooleanField(help_text='Track stock inventory for this item')),
                ('item_quantity', models.IntegerField(blank=True, help_text='Current amount of item available', null=True)),
                ('reorder_threshold', models.IntegerField(blank=True, help_text='Quantity at which to reorder item', null=True)),
                ('reorder_needed', models.BooleanField(blank=True, help_text='Whether the item is at or below the value set for reorder threshold', null=True)),
                ('stop_sell', models.IntegerField(blank=True, help_text='Quantity at which to stop selling product', null=True)),
                ('price_without_fees_and_taxes', models.FloatField(blank=True, help_text='Item price subtracting the included taxes', null=True)),
                ('grand_total', models.FloatField(blank=True, help_text='Item price with fees and taxes', null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='item.itemcategories')),
                ('fees', models.ManyToManyField(blank=True, help_text='Details of the fees applicable', related_name='items', to='taxesandfees.Fee')),
                ('taxes', models.ManyToManyField(blank=True, help_text='Details of the taxes applicable', related_name='items', to='taxesandfees.Taxes')),
            ],
        ),
        migrations.CreateModel(
            name='CustomItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_quantity', models.IntegerField(help_text='Items quantity')),
                ('item_price', models.CharField(blank=True, help_text='Item price. If not sent, the registered price of the item will be used.', max_length=255, null=True)),
                ('item_note', models.CharField(blank=True, help_text='Item note', max_length=255, null=True)),
                ('item_paid', models.BooleanField(default=False, help_text='If the item is already paid. Note: If set to true, a payment in cash will be registered for the total value of the item, taxes, and fees. If this is not the expected behavior, set to false and register the operation manually. If payments are set, itemPaid is ignored.')),
                ('sale_date', models.DateTimeField(auto_now_add=True, help_text='Posting date', null=True)),
                ('house_account', models.ForeignKey(help_text='House account identifier. Required if no reservationID is provided.', on_delete=django.db.models.deletion.CASCADE, to='app.houseaccount')),
                ('payments', models.ManyToManyField(blank=True, help_text='List of payments if the item is already paid', related_name='custom_items', to='payment.Payment')),
                ('reservation', models.ForeignKey(help_text='Reservation identifier. Required if no houseAccountID is provided.', on_delete=django.db.models.deletion.CASCADE, to='reservation.reservation')),
            ],
        ),
    ]
